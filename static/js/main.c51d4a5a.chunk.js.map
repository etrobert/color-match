{"version":3,"sources":["utils.ts","atoms.ts","Nav.tsx","ColorPicker.tsx","NewGarment.tsx","FeatherIcon.tsx","NewGarmentButton.tsx","Outfits.tsx","Wardrobe.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["pairs","arr","map","v","i","slice","w","flat","hue","color","getHsl","colorDiff","a","n","color1","color2","diff","Math","abs","floor","viewState","atom","key","default","wardrobeState","computeScore","garments","colors","flatten","garment","colorPairsScores","max","outfitsState","selector","get","wardrobe","pair","score","Nav","setView","useSetRecoilState","onClick","ColorComponent","style","width","height","backgroundColor","ColorPicker","palette","onSubmit","useState","selected","setSelected","className","event","preventDefault","Object","entries","value","undefined","type","onChange","checked","target","without","getHex","NewGarment","imageData","onDone","setPalette","useEffect","Vibrant","from","getPalette","then","console","log","setWardrobe","src","alt","FeatherIcon","name","options","dangerouslySetInnerHTML","__html","feather","icons","toSvg","NewGarmentButton","ref","useRef","accept","display","files","reader","FileReader","onload","result","readAsDataURL","current","click","classNames","Outfits","outfits","useRecoilValue","outfit","index","Wardrobe","App","view","setImageData","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c51d4a5a.chunk.js","sourcesContent":["import { Swatch } from 'node-vibrant/lib/color';\n\n/**\n * Source: https://stackoverflow.com/a/57834210\n */\nconst pairs = <T>(arr: T[]) =>\n  arr.map((v, i) => arr.slice(i + 1).map((w) => [v, w] as const)).flat();\n\nconst hue = (color: Swatch) => color.getHsl()[0] * 360;\n\n/**\n * Source: https://stackoverflow.com/a/7869457\n */\nconst mod = (a: number, n: number) => a - Math.floor(a / n) * n;\n\nconst colorDiff = ([color1, color2]: readonly [Swatch, Swatch]) => {\n  const hue1 = hue(color1);\n  const hue2 = hue(color2);\n\n  const diff = hue1 - hue2;\n\n  // Source: https://stackoverflow.com/a/7869457\n  return Math.abs(mod(diff + 180, 360) - 180);\n};\n\nexport { pairs, hue, colorDiff };\n","import { Swatch } from 'node-vibrant/lib/color';\nimport { atom, selector } from 'recoil';\nimport flatten from 'lodash/flatten';\n\nimport { colorDiff, pairs } from './utils';\n\ntype View = 'outfits' | 'wardrobe';\n\ntype Garment = {\n  imageData: string;\n  colors: Swatch[];\n};\n\ntype Outfit = {\n  score: number;\n  garments: readonly Garment[];\n};\n\nconst viewState = atom<View>({\n  key: 'View',\n  default: 'outfits',\n});\n\nconst wardrobeState = atom<Garment[]>({\n  key: 'Wardrobe',\n  default: [],\n});\n\nconst computeScore = (garments: readonly Garment[]): number => {\n  const colors = flatten(garments.map((garment) => garment.colors));\n  const colorPairsScores = pairs(colors).map(colorDiff);\n  return Math.max(...colorPairsScores);\n};\n\nconst outfitsState = selector<Outfit[]>({\n  key: 'Outfits',\n  get: ({ get }) => {\n    const wardrobe = get(wardrobeState);\n    return pairs(wardrobe).map((pair) => ({\n      garments: pair,\n      score: computeScore(pair),\n    }));\n  },\n});\n\nexport { viewState, wardrobeState, outfitsState };\n","import { useSetRecoilState } from 'recoil';\nimport { viewState } from './atoms';\n\nconst Nav = () => {\n  const setView = useSetRecoilState(viewState);\n\n  return (\n    <nav>\n      <ul>\n        <li>\n          <button onClick={() => setView('outfits')}>Create Outfit</button>\n        </li>\n        <li>\n          <button onClick={() => setView('wardrobe')}>My clothes</button>\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import { Palette, Swatch } from 'node-vibrant/lib/color';\nimport { useState } from 'react';\nimport without from 'lodash/without';\n\nimport './ColorPicker.css';\n\nconst ColorComponent = ({ color }: { color: string }) => (\n  <div\n    style={{\n      width: '100%',\n      height: 200,\n      backgroundColor: color,\n    }}\n  />\n);\n\ntype Props = {\n  palette: Palette;\n  onSubmit: (colors: Swatch[]) => void;\n};\n\nconst ColorPicker = ({ palette, onSubmit }: Props) => {\n  const [selected, setSelected] = useState<Swatch[]>([]);\n\n  return (\n    <form\n      className=\"ColorPicker\"\n      onSubmit={(event) => {\n        event.preventDefault();\n        onSubmit(selected);\n      }}\n    >\n      {Object.entries(palette).map(\n        ([key, value]) =>\n          value !== undefined && (\n            <label>\n              <input\n                type=\"checkbox\"\n                onChange={(event) => {\n                  const { checked } = event.target;\n                  setSelected((selected) =>\n                    checked ? [...selected, value] : without(selected, value)\n                  );\n                }}\n              />\n              {key}\n              <ColorComponent color={value.getHex()} />\n            </label>\n          )\n      )}\n      <button type=\"submit\">Confirm</button>\n    </form>\n  );\n};\n\nexport default ColorPicker;\n","import { useEffect, useState } from 'react';\nimport { useSetRecoilState } from 'recoil';\nimport Vibrant from 'node-vibrant';\nimport { Palette } from 'node-vibrant/lib/color';\n\nimport { wardrobeState } from './atoms';\nimport ColorPicker from './ColorPicker';\n\nimport './NewGarment.css';\n\ntype Props = {\n  imageData: string;\n  onDone: () => void;\n};\n\nconst NewGarment = ({ imageData, onDone }: Props) => {\n  const [palette, setPalette] = useState<Palette>();\n  useEffect(() => {\n    Vibrant.from(imageData)\n      .getPalette()\n      .then((palette) => setPalette(palette));\n  }, [imageData]);\n\n  useEffect(() => {\n    console.log(palette);\n  }, [palette]);\n\n  const setWardrobe = useSetRecoilState(wardrobeState);\n\n  return (\n    <>\n      <img className=\"NewGarment__image\" src={imageData} alt=\"garment\" />\n      {palette !== undefined && (\n        <ColorPicker\n          palette={palette}\n          onSubmit={(colors) => {\n            setWardrobe((wardrobe) => [...wardrobe, { imageData, colors }]);\n            onDone();\n          }}\n        />\n      )}\n    </>\n  );\n};\n\nexport default NewGarment;\n","import feather, { FeatherAttributes } from 'feather-icons';\n\ntype Props = {\n  name: string;\n  options?: FeatherAttributes;\n};\n\nconst FeatherIcon = ({ name, options }: Props) => (\n  <span\n    dangerouslySetInnerHTML={{\n      __html: feather.icons[name].toSvg({\n        style: 'display: block', // TODO combine with style from options\n        ...options,\n      }),\n    }}\n  />\n);\nexport default FeatherIcon;\n","import classNames from 'classnames';\nimport { useRef } from 'react';\nimport FeatherIcon from './FeatherIcon';\n\nimport './NewGarmentButton.css';\n\ntype Props = {\n  className?: string;\n  onDone: (imageData: string) => void;\n};\n\nconst NewGarmentButton = ({ className, onDone }: Props) => {\n  const ref = useRef<HTMLInputElement>(null);\n  return (\n    <>\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        ref={ref}\n        style={{ display: 'none' }}\n        onChange={(event) => {\n          const files = event.target.files;\n          if (files === null) return;\n          const reader = new FileReader();\n          reader.onload = (event) => {\n            const result = event.target?.result;\n            if (typeof result !== 'string') return;\n            onDone(result);\n          };\n          reader.readAsDataURL(files[0]);\n        }}\n      />\n      <button\n        onClick={() => ref.current?.click()}\n        className={classNames('NewGarmentButton', className)}\n      >\n        <FeatherIcon\n          name=\"plus\"\n          options={{ width: '2.5rem', height: '2.5rem' }}\n        />\n      </button>\n    </>\n  );\n};\n\nexport default NewGarmentButton;\n","import { useRecoilValue } from 'recoil';\nimport { outfitsState } from './atoms';\n\nconst Outfits = () => {\n  const outfits = useRecoilValue(outfitsState);\n  return (\n    <ul>\n      {outfits.map((outfit, index) => (\n        <li>\n          Outfit {index}\n          <br />\n          Score: {outfit.score}\n          {outfit.garments.map((garment) => (\n            <img style={{ width: '100%' }} src={garment.imageData} />\n          ))}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Outfits;\n","import { useRecoilValue } from 'recoil';\n\nimport { wardrobeState } from './atoms';\n\nimport './Wardrobe.css';\n\nconst Wardrobe = () => {\n  const wardrobe = useRecoilValue(wardrobeState);\n  return (\n    <ul>\n      {wardrobe.map((garment) => (\n        <li>\n          <img\n            className=\"Wardrobe__image\"\n            alt=\"garment\"\n            src={garment.imageData}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Wardrobe;\n","import { useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport './App.css';\nimport { viewState } from './atoms';\nimport Nav from './Nav';\nimport NewGarment from './NewGarment';\nimport NewGarmentButton from './NewGarmentButton';\nimport Outfits from './Outfits';\nimport Wardrobe from './Wardrobe';\n\nfunction App() {\n  const view = useRecoilValue(viewState);\n\n  const [imageData, setImageData] = useState<string>();\n\n  return (\n    <div className=\"App\">\n      {imageData === undefined ? (\n        <>\n          <NewGarmentButton onDone={setImageData} />\n          <Nav />\n          {view === 'outfits' && <Outfits />}\n          {view === 'wardrobe' && <Wardrobe />}\n        </>\n      ) : (\n        <NewGarment\n          imageData={imageData}\n          onDone={() => setImageData(undefined)}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}